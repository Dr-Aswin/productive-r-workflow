get_sf <- function(country_sf, country_transformed) {
country_sf <- giscoR::gisco_get_countries(
year = "2016",
epsg = "4326",
resolution = "10",
country = "country")
country_transformed <- st_transform(country_sf, crs = crsLONGLAT)
return(country_transformed)
}
country_transformed <- get_sf()
get_elevation_data <- function(country_elevation, country_elevation_df) {
country_elevation <- get_elev_raster(
locations = country_transformed,
z = 9,
clip = "locations")
country_elevation_df <- as.data.frame(country_elevation, xy = T) %>%
na.omit()
colnames(country_elevation_df)[3] <- "elevation"
return(country_elevation_df)
}
country_elevation_df <- get_elevation_data()
View(get_elevation_data)
View(get_elevation_data)
View(get_elevation_data)
get_elevation_data <- function(country_elevation, country_elevation_df) {
country_elevation <- get_elev_raster(
locations = Italy,
z = 9,
clip = "locations")
country_elevation_df <- as.data.frame(country_elevation, xy = T) %>%
na.omit()
colnames(country_elevation_df)[3] <- "elevation"
return(country_elevation_df)
}
country_elevation_df <- get_elevation_data()
get_elevation_data <- function(country_elevation, country_elevation_df) {
country_elevation <- elevatr::get_elev_raster(
locations = country_sf,
z = 9,
clip = "locations")
return(country_elevation)
}
country_elevation<- get_elevation_data()
terra::plot(country_elevation)
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_sf <- function(country_sf, country_transformed) {
country_sf <- giscoR::gisco_get_countries(
year = "2016",
epsg = "4326",
resolution = "10",
country = "IT")
country_transformed <- st_transform(country_sf, crs = crsLONGLAT)
return(country_transformed)
}
country_transformed <- get_sf()
windowsFonts(georg = windowsFont('Georgia'))
libs <- c("elevatr", "terra", "tidyverse","sf", "giscoR", "marmap")
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_country_sf<- function(){}
get_country_sf<- function(){
country_sf <- gisco::gisco_get_countries(
year="2020",
epsg="4326",
resolution="10",
country="IT"
) |>
sf::st_transform(country_sf,crs=crsLONGLAT)
return(country_sf)
}
country_sf<-get_country_sf()
install.packages("giscoR")
IT
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_sf <- function(country_sf, country_transformed) {
country_sf <- giscoR::gisco_get_countries(
year = "2016",
epsg = "4326",
resolution = "10",
country = "IT")
country_transformed <- st_transform(country_sf, crs = crsLONGLAT)
return(country_transformed)
}
country_transformed <- get_sf()
get_country_sf<- function(){
+     country_sf <- gisco::gisco_get_countries(
+         year="2020",
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_sf <- function(country_sf, country_transformed) {
country_sf <- giscoR::gisco_get_countries(
year = "2016",
epsg = "4326",
resolution = "10",
country = "IT")
country_transformed <- st_transform(country_sf, crs = crsLONGLAT)
return(country_transformed)
}
country_transformed <- get_sf()
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_sf <- function(country_sf, country_transformed) {
country_sf <- giscoR::gisco_get_countries(
year = "2016",
epsg = "4326",
resolution = "10",
country = "country")
country_transformed <- st_transform(country_sf, crs = crsLONGLAT)
return(country_transformed)
}
country_transformed <- get_sf()
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_sf <- function(country_sf, country_transformed) {
country_sf <- giscoR::gisco_get_countries(
year = "2016",
epsg = "4326",
resolution = "10",
country = "italy")
country_transformed <- st_transform(country_sf, crs = crsLONGLAT)
return(country_transformed)
}
country_transformed <- get_sf()
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_sf <- function(country_sf, country_transformed) {
country_sf <- giscoR::gisco_get_countries(
year = "2016",
epsg = "4326",
resolution = "10",
country = "italy")
country_transformed <- st_transform(italy_sf, crs = crsLONGLAT)
return(italy_transformed)
}
country_transformed <- get_sf()
italy
print("GET COUNTRY BORDERS")
get_country_borders <- function() {
country_borders <- giscoR::gisco_get_countries(
resolution = "3",
country = "US"
)
return(country_borders)
}
country_borders <- get_country_borders()
# 2. GET BASINS
#---------------
print("GET BASINS")
# https://data.hydrosheds.org/file/HydroBASINS/standard/hybas_sa_lev03_v1c.zip
get_basins <- function() {
url <- "https://data.hydrosheds.org/file/HydroBASINS/standard/hybas_na_lev03_v1c.zip"
file_name <- "hybas_na_lev03_v1c.zip"
download.file(
url = url,
destfile = file_name,
mode = "wb"
)
unzip(file_name)
}
get_basins()
print("basin downloaded")
list.files()
print("load basin")
load_basins <- function() {
print("loading filenames")
filenames <- list.files(
pattern = ".shp$",
full.names = TRUE
)
print(filenames)
namerica_basin <- sf::st_read(
filenames
)
return(namerica_basin)
}
namerica_basin <- load_basins()
print("basin loaded")
print("Intersect Basin with only the wanted Country Boundary.")
sf::sf_use_s2(F)
brazil_basin <- namerica_basin |>
sf::st_intersection(
country_borders
) |>
dplyr::select(
HYBAS_ID
)
# 3. GET RIVERS DATA
#-------------------
print("Get Rivers")
# https://data.hydrosheds.org/file/HydroRIVERS/HydroRIVERS_v10_sa_shp.zip
get_rivers <- function() {
url <- "https://data.hydrosheds.org/file/HydroRIVERS/HydroRIVERS_v10_na_shp.zip"
file_name <- "na-rivers.zip"
download.file(
url = url,
destfile = file_name,
mode = "wb"
)
unzip(file_name)
}
get_rivers()
print("Getting Rivers")
list.files()
load_rivers <- function() {
filenames <- list.files(
path = "HydroRIVERS_v10_na_shp",
pattern = ".shp$",
full.names = T
)
print(filenames)
namerica_rivers <- sf::st_read(
filenames
)
return(namerica_rivers)
}
namerica_rivers <- load_rivers()
brazil_rivers <- namerica_rivers |>
dplyr::select(
ORD_FLOW
) |>
sf::st_intersection(
country_borders
)
# 4. DETERMINE BASIN FOR EVERY RIVER
#-----------------------------------
brazil_river_basin <- sf::st_intersection(
brazil_rivers,
brazil_basin
)
# 5. RIVER WIDTH
#---------------
unique(brazil_river_basin$ORD_FLOW)
brazil_river_basin_width <- brazil_river_basin |>
dplyr::mutate(
width = as.numeric(
ORD_FLOW
),
width = dplyr::case_when(
width == 1 ~ .8,
width == 2 ~ .7,
width == 3 ~ .6,
width == 4 ~ .45,
width == 5 ~ .35,
width == 6 ~ .25,
width == 7 ~ .2,
width == 8 ~ .15,
width == 9 ~ .1,
TRUE ~ 0
)
) |>
sf::st_as_sf()
# 6. PLOT
#--------
unique(
brazil_river_basin_width$HYBAS_ID
)
hcl.pals("qualitative")
p <- ggplot() +
geom_sf(
data = brazil_river_basin_width,
aes(
color = factor(
HYBAS_ID
),
size = width,
alpha = width
)
) +
scale_color_manual(
name = "",
values = hcl.colors(
17, "Dark 3",
alpha = 1
)
) +
scale_size(
range = c(.1, .7)
) +
scale_alpha(
range = c(.01, .7)
) +
theme_void() +
theme(
legend.position = "none",
plot.caption = element_text(
size = 9, color = "grey60",
hjust = .1, vjust = 10
),
plot.margin = unit(
c(
t = 0, r = 0,
b = 0, l = 0
),
"lines"
),
plot.background = element_rect(
fill = "black",
color = NA
),
panel.background = element_rect(
fill = "black",
color = NA
)
) +
labs(
title = "",
x = "",
y = "",
# caption = "Source: ©World Wildlife Fund, Inc. (2006-2013) HydroSHEDS database http://www.hydrosheds.org"
)
install.packages("ggplot2")
p <- ggplot() +
+     geom_sf(
+         data = brazil_river_basin_width,
p <- ggplot() +
+     geom_sf(
+         data = brazil_river_basin_width,
p <- ggplot() +
+     geom_sf(
+         data = brazil_river_basin_width,
p <- ggplot() +
+     geom_sf(
+         data ,
+         aes(
+             color = factor(
p <- ggplot()
save.image("C:/Users/aswin/OneDrive/Documents/mapin R.RData")
ggplot
ggplot2::aes()
p <- ggplot2() +
+     geom_sf(
+         data = brazil_river_basin_width,
load("~/mapin R.RData")
library(ggplot2)
p <- ggplot() +
geom_sf(
data = brazil_river_basin_width,
aes(
color = factor(
HYBAS_ID
),
size = width,
alpha = width
)
) +
scale_color_manual(
name = "",
values = hcl.colors(
17, "Dark 3",
alpha = 1
)
) +
scale_size(
range = c(.1, .7)
) +
scale_alpha(
range = c(.01, .7)
) +
theme_void() +
theme(
legend.position = "none",
plot.caption = element_text(
size = 9, color = "grey60",
hjust = .1, vjust = 10
),
plot.margin = unit(
c(
t = 0, r = 0,
b = 0, l = 0
),
"lines"
),
plot.background = element_rect(
fill = "black",
color = NA
),
panel.background = element_rect(
fill = "black",
color = NA
)
) +
labs(
title = "",
x = "",
y = "",
# caption = "Source: ©World Wildlife Fund, Inc. (2006-2013) HydroSHEDS database http://www.hydrosheds.org"
)
ggsave(
filename = "us-river-basins.png",
width = 7, height = 7.75, dpi = 600,
bg = "white", device = "png", p
)
st_write(brazil_river_basin_width, "us-river-basins.geojson", layer = NULL, driver = "GeoJson")
View(p)
data <- read.csv("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/data_2.csv")
summary(data)
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Torgersen")$bill_length_mm),2))
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Biscoe")$bill_length_mm),2))
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Dream")$bill_length_mm),2))
# Plot
penguins_clean <- na.omit(   data  )
plot(penguins_clean$bill_length_mm, penguins_clean$bill_depth_mm, type='n', xlab='Bill Length (mm)', ylab='Bill Depth (mm)', main='Penguin Bill Dimensions')
points(
penguins_clean$bill_length_mm[penguins_clean$species  ==  "Adelie"], penguins_clean$bill_depth_mm[penguins_clean$species == "Adelie"], col='red', pch=16)
points(penguins_clean$bill_length_mm[penguins_clean$species == "Chinstrap"], penguins_clean$bill_depth_mm[penguins_clean$species == "Chinstrap"], col='green', pch=17)
points(penguins_clean$bill_length_mm[penguins_clean$species == "Gentoo"],
penguins_clean$bill_depth_mm[penguins_clean$species == "Gentoo"], col='blue', pch=18)
legend("topright", legend=unique(penguins_clean$species),
col=c('red'
, 'green',
'blue'), pch=c(16, 17, 18))
install.packages("styler")
styler:::style_active_file()
library(tidyverse)
# Tell R where your working directory is located
# You must update this!!!!!
setwd("C:\Users\aswin\Desktop\productive-r-workflow")
library(tidyverse)
# Tell R where your working directory is located
# You must update this!!!!!
setwd("C:\Users\aswin\Desktop\productive-r-workflow")
library(tidyverse)
# Tell R where your working directory is located
# You must update this!!!!!
setwd("C:/Users/aswin/Desktop/productive-r-workflow")
# Read data using readr
data <- readr::read_csv("input/data.csv")
summary(data)
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Torgersen")$bill_length_mm),2))
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Biscoe")$bill_length_mm),2))
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Dream")$bill_length_mm),2))
# Plot
penguins_clean <- na.omit(   data  )
plot(penguins_clean$bill_length_mm, penguins_clean$bill_depth_mm, type='n', xlab='Bill Length (mm)', ylab='Bill Depth (mm)', main='Penguin Bill Dimensions')
points(
penguins_clean$bill_length_mm[penguins_clean$species  ==  "Adelie"], penguins_clean$bill_depth_mm[penguins_clean$species == "Adelie"], col='red', pch=16)
points(penguins_clean$bill_length_mm[penguins_clean$species == "Chinstrap"], penguins_clean$bill_depth_mm[penguins_clean$species == "Chinstrap"], col='green', pch=17)
points(penguins_clean$bill_length_mm[penguins_clean$species == "Gentoo"],
penguins_clean$bill_depth_mm[penguins_clean$species == "Gentoo"], col='blue', pch=18)
legend("topright", legend=unique(penguins_clean$species),
col=c('red'
, 'green',
'blue'), pch=c(16, 17, 18))
getwd()
getwd()
data <- read.csv("data.csv")
summary(data)
data <- read.csv("input/data.csv")
library(tidyverse)
library(readxl)
# Read data using readxl
data <- read_excel("input/data.xlsx", na = "NA")
View(data)
multiply <- function(a) {return(a*311)}
multiply(234)
sum <- function(a,b){return(a+b)}
sum(5,4)
sum(3256,8934)
f <- function(number) {
return(number %% 2 == 0)
}
f(2)
f(12)
f(a)
f(5,6)
f(1)
f(7)
# plot function
create_scatterplot <- function(data, selected_species, selected_island) {
# Filter the data for the specified species and island
filtered_data <- data %>%
na.omit() %>%
filter(species == selected_species, island == selected_island)
# Create the scatterplot
plot <- ggplot(
filtered_data,
aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)
) +
geom_point() +
labs(
x = "Bill Length (mm)",
y = "Bill Depth (mm)",
title = paste("Penguin Bill Dimensions -", selected_species, "-", selected_island)
)
return(plot)
}
# Use the function
create_scatterplot(data, "Adelie", "Torgersen")
source(functions.R)
source(functions.R)
source(file="R/functions.R")
create_scatterplot(data, "Adelie", "Torgersen")
library(tidyverse)
library(readxl)
data <- read_excel("input/data.xlsx", na = "NA")
# Remove 2 rows that are known to be wrong
clean_data <- data %>%
slice(-c(23, 48))
# Save in RDS format
saveRDS(clean_data, file = "input/clean_data.rds")
citation("tidyverse")
library(rmarkdown)
# load the tidyverse
library(tidyverse)
# load the tidyverse
library(tidyverse)
library(xfun)
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
library(xfun)
detach("package:xfun", unload = TRUE)
install.packages(c("knitr", "rmarkdown"))
library(tidyverse)
detach("package:tidyr", unload = TRUE)
install.packages("dplyr")
library(tidyverse)
